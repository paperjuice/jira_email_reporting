var _user$project$Main$url = 'http://localhost:9999/email-report/';
var _user$project$Main$SprintStart = F6(
	function (a, b, c, d, e, f) {
		return {title: a, start: b, sprint_goal: c, project_name: d, end: e, issues: f};
	});
var _user$project$Main$Issue = F5(
	function (a, b, c, d, e) {
		return {story_link: a, story_key: b, story_desc: c, epic_name: d, epic_link: e};
	});
var _user$project$Main$issuesDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'epic_link',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'epic_name',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'story_link',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'story_desc',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'story_key',
					_elm_lang$core$Json_Decode$string,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$Issue))))));
var _user$project$Main$sprintStartDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'issues',
	_elm_lang$core$Json_Decode$list(_user$project$Main$issuesDecoder),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'goal',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'sprint_end',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'sprint_start',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'project_name',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'title',
						_elm_lang$core$Json_Decode$string,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$SprintStart)))))));
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {base64_key: a, username: b, password: c, storyKey: d};
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A4(_user$project$Main$Model, '', '', '', ''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$Generate = {ctor: 'Generate'};
var _user$project$Main$SprintKey = function (a) {
	return {ctor: 'SprintKey', _0: a};
};
var _user$project$Main$Base64 = {ctor: 'Base64'};
var _user$project$Main$Password = function (a) {
	return {ctor: 'Password', _0: a};
};
var _user$project$Main$Username = function (a) {
	return {ctor: 'Username', _0: a};
};
var _user$project$Main$view = function (model) {
	var _p0 = model.base64_key;
	if (_p0 === '') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Username: '),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$Username),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Password: '),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('Password'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$Password),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Base64),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Authenticate'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Add story-key from active sprint to generate Sprint Start Report'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Add story-key from closed sprint to generate Sprint End Report'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$placeholder('e.g. ABC-123'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$SprintKey),
											_1: {ctor: '[]'}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Generate),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Generate'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	}
};
var _user$project$Main$Decode = function (a) {
	return {ctor: 'Decode', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'Username':
				return {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$Debug$log,
						'hello',
						_elm_lang$core$Native_Utils.update(
							model,
							{username: _p1._0})),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Password':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{password: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SprintKey':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{storyKey: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Base64':
				var encoded = _truqu$elm_base64$Base64$encode(
					A2(
						_elm_lang$core$Basics_ops['++'],
						model.username,
						A2(_elm_lang$core$Basics_ops['++'], ':', model.password)));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{base64_key: encoded, username: '', password: ''}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Generate':
				var header = A2(_elm_lang$http$Http$header, 'Basic', model.base64_key);
				var req = _elm_lang$http$Http$request(
					{
						method: 'GET',
						headers: {
							ctor: '::',
							_0: header,
							_1: {ctor: '[]'}
						},
						url: A2(_elm_lang$core$Basics_ops['++'], _user$project$Main$url, model.storyKey),
						body: _elm_lang$http$Http$emptyBody,
						expect: _elm_lang$http$Http$expectString,
						timeout: _elm_lang$core$Maybe$Nothing,
						withCredentials: false
					});
				var command = A2(_elm_lang$http$Http$send, _user$project$Main$Decode, req);
				return {ctor: '_Tuple2', _0: model, _1: command};
			default:
				var re = A2(_elm_lang$core$Debug$log, 'Result', _p1._0);
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: _user$project$Main$init,
		update: _user$project$Main$update,
		view: _user$project$Main$view,
		subscriptions: function (_p2) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
